<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>{{ title }}</title>
        <meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no' name='viewport'>
        
        {% block css %}
             <!-- Bootstrap 3.3.2 -->
            <link href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
             <!-- FontAwesome 4.3.0 -->
            <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet" type="text/css" />
            <!-- Ionicons 2.0.0 -->
            <link href="http://code.ionicframework.com/ionicons/2.0.0/css/ionicons.min.css" rel="stylesheet" type="text/css" />  
            <!-- Morris chart -->
            <link href="{{ asset('/css/morris/morris.css') }}" rel="stylesheet" type="text/css" />
            <!-- jvectormap -->
            <link href="{{ asset('/css/jvectormap/jquery-jvectormap-1.2.2.css') }}" rel="stylesheet" type="text/css" />
            <!-- Date Picker -->
            <link href="{{ asset('/css/datepicker/datepicker3.css') }}" rel="stylesheet" type="text/css" />
            <!-- Daterange picker -->
            <link href="{{ asset('/css/daterangepicker/daterangepicker-bs3.css') }}" rel="stylesheet" type="text/css" />
            <!-- bootstrap wysihtml5 - text editor -->
            <link href="{{ asset('/css/bootstrap-wysihtml5/bootstrap3-wysihtml5.min.css') }}" rel="stylesheet" type="text/css" />
            <!-- iCheck -->
            <link href="plugins/iCheck/flat/blue.css" rel="stylesheet" type="text/css" />
            <!-- gridster -->
            <link href="{{ asset('/css/gridster/jquery.gridster.css') }}" rel="stylesheet" type="text/css" />
            <!-- toaster -->
            <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" rel="stylesheet" type="text/css">
            <!-- Theme style -->
            <link href="{{ asset('/css/AdminLTE.css') }}" rel="stylesheet" type="text/css" />
            <!-- AdminLTE Skins. Choose a skin from the css/skins 
                 folder instead of downloading all of them to reduce the load. -->
            <link href="{{ asset('/css/skins/_all-skins.min.css') }}" rel="stylesheet" type="text/css" />
            <link href="{{ asset('/css/heartbeat.css') }}" rel="stylesheet" type="text/css" />

        {% endblock %}

        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
          <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
        <![endif]-->
    </head>
    <body class="skin-blue fixed">
        <div class="wrapper">
            <header class="main-header">
                <a href="{{ path('home') }}" class="logo">
                    <!-- Add the class icon to your logo image or logo icon to add the margining -->
                    Heartbeat | Innova
                </a>

                <nav class="navbar navbar-static-top" role="navigation">
                    <!-- Sidebar toggle button-->
                    <a href="#" class="sidebar-toggle" data-toggle="offcanvas" role="button">
                        <span class="sr-only">Toggle navigation</span>
                    </a>
                    <div class="navbar-custom-menu">
                        <ul class="nav navbar-nav">
                          <!-- User Account: style can be found in dropdown.less -->
                          <li class="dropdown user user-menu">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                              <img src="{{ app.user.username|githubAvatarURL }}" class="user-image" alt="User avatar"/>
                              <span class="hidden-xs">{{ app.user.username }}</span>
                            </a>
                            <ul class="dropdown-menu">
                              <!-- User avatar -->
                              <li class="user-header">
                                <img src="{{ app.user.username|githubAvatarURL }}" class="img-circle" alt="User avatar" />
                                <p>
                                  {{ app.user.username|githubName }} - Web Developer
                                  <small>Member since Nov. 2012</small>
                                </p>
                              </li>
                              <!-- Menu Body -->
                              <li class="user-body">
                                <div class="col-xs-12 text-center">
                                  <a href="{{ app.user.username|githubHTMLURL }}">Github</a>
                                </div>
                              </li>
                              <!-- Menu Footer-->
                              <li class="user-footer">
                                <div class="pull-left">
                                  <a href="{{ path('fos_user_profile_show') }}" class="btn btn-default btn-flat">Profile</a>
                                </div>
                                <div class="pull-right">
                                  <a href="{{ path('fos_user_security_logout') }}" class="btn btn-default btn-flat">Sign out</a>
                                </div>
                              </li>
                            </ul>
                          </li>
                        </ul>
                    </div>
                </nav>
            </header>

            <!-- Left side column. contains the logo and sidebar -->
            <aside class="main-sidebar">
                <!-- sidebar: style can be found in sidebar.less -->
                <section class="sidebar">
                    <!-- sidebar menu: : style can be found in sidebar.less -->
                    <ul class="sidebar-menu">
                        <li class="active">
                            <a href="{{ path('home') }}">
                                <i class="fa fa-dashboard"></i> <span>Dashboard</span>
                            </a>
                        </li>
                        <li>
                            <a href="{{ path('users') }}">
                                <i class="fa fa-users"></i> <span>Users</span>
                            </a>
                        </li>
                        <li>
                            <a href="{{ path('servers') }}">
                                <i class="fa fa-hdd-o"></i> <span>Servers</span>
                            </a>
                        </li>
                        <li>
                            <a href="{{ path('apps') }}">
                                <i class="fa fa-cloud"></i> <span>Applications</span>
                            </a>
                        </li>
                        <li>
                            <a href="{{ path('devdocs') }}">
                                <i class="fa fa-book"></i> <span>Devdocs</span>
                            </a>
                        </li>
                        <li>
                            <a href="http://zimbra.u-grenoble3.fr">
                                <i class="fa fa-envelope"></i> <span>Email</span>
                            </a>
                        </li>
                    </ul>
                </section>
                <!-- /.sidebar -->
            </aside>

            <!-- Content Wrapper. Contains page content -->
            <div class="content-wrapper">
                <!-- Content Header (Page header) -->
                <section class="content-header">
                    <h1>{{ title }}</h1>
                    <ol class="breadcrumb">
                        <li><a href="{{ path('home') }}"><i class="fa fa-dashboard"></i>Dashboard</a></li>

                        {% if title != 'Dashboard' %}

                            <li class="active">{{ title }}</li>
                            
                        {% endif %}

                    </ol>
                </section>

                <!-- Main content -->
                <section class="content">
                    {% block content %}
                    {% endblock %}
                </section><!-- /.content -->
            </div><!-- /.content-wrapper -->
            <footer class="main-footer">
                <div class="pull-right hidden-xs">
                    <b>Version</b> DEV
                </div>
                <strong>Powered by <a href="http://innovalangues.fr">Innovalangues</a>.</strong>
            </footer>
        </div><!-- ./wrapper -->

        <!-- add new calendar event modal -->
        {% block javascripts %}

            <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
            <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js" type="text/javascript"></script>
            <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js" type="text/javascript"></script>
            <!-- Morris.js charts -->
            <script src="//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
            <script src="{{ asset('/js/plugins/morris/morris.min.js') }}" type="text/javascript"></script>
            <!-- Sparkline -->
            <script src="{{ asset('/js/plugins/sparkline/jquery.sparkline.min.js') }}" type="text/javascript"></script>
            <!-- jvectormap -->
            <script src="{{ asset('/js/plugins/jvectormap/jquery-jvectormap-1.2.2.min.js') }}" type="text/javascript"></script>
            <script src="{{ asset('/js/plugins/jvectormap/jquery-jvectormap-world-mill-en.js') }}" type="text/javascript"></script>
            <!-- jQuery Knob Chart -->
            <script src="{{ asset('/js/plugins/jqueryKnob/jquery.knob.js') }}" type="text/javascript"></script>
            <!-- daterangepicker -->
            <script src="{{ asset('/js/plugins/daterangepicker/daterangepicker.js') }}" type="text/javascript"></script>
            <!-- datepicker -->
            <script src="{{ asset('/js/plugins/datepicker/bootstrap-datepicker.js') }}" type="text/javascript"></script>
            <!-- Bootstrap WYSIHTML5 -->
            <script src="{{ asset('/js/plugins/bootstrap-wysihtml5/bootstrap3-wysihtml5.all.min.js') }}" type="text/javascript"></script>
            <!-- iCheck -->
            <script src="{{ asset('/js/plugins/iCheck/icheck.min.js') }}" type="text/javascript"></script>

            <!-- AdminLTE App -->
            <script src="{{ asset('/js/AdminLTE/app.js') }}" type="text/javascript"></script>

            <script src="{{ asset('/js/plugins/stickyjs/jquery.sticky.js') }}" type="text/javascript"></script>

            <script src="{{ asset('/js/plugins/gridster/jquery.gridster.js') }}" type="text/javascript"></script>

            <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js" type="text/javascript"></script>
            
            <!-- High charts -->
            <script src="http://code.highcharts.com/highcharts.js" type="text/javascript"></script>

            <script src="{{ asset('/js/heartbeat.js') }}" type="text/javascript"></script>

            <!-- Sockets -->
            {% if channels is defined %}
            
            <!-- Sockets -->
            <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.2.1/socket.io.min.js" type="text/javascript"></script>
            
            <script>

                var channels = [ ];

                {% for channel in channels %}

                channels.push("{{ channel }}");

                {% endfor %}

                var socket = io.connect(
                    'http://localhost:3000', //TODO get from config
                    {
                        query: {
                            channels: channels
                        }
                    }
                );

            </script>

            <script src="{{ asset('/js/socket/socket-global.js') }}" type="text/javascript"></script>
            <script src="{{ asset('/js/socket/socket-server.js') }}" type="text/javascript"></script>


            <script>
$(function () {
    $(document).ready(function () {
        Highcharts.setOptions({
            global: {
                useUTC: false
            }
        });


        var serverDatas = JSON.parse($('#serverDatas').html()).reverse();

        var loadMax = {
            name: 'Maximum Load',
            color: '#dd4b39',
            marker : {
                enabled : false
            }
        };

        var load1min = {
            name: 'Load (1min)',
            color: '#00c0ef',
            type: 'areaspline',
            marker : {
                enabled : false
            }
        };

        var load5min = {
            name: 'Load (5min)',
            color: '#00a65a',
            marker : {
                enabled : false
            }
        };

        var load15min = {
            name: 'Load (15min)',
            color: '#f39c12',
            marker : {
                enabled : false
            }
        };

        var details;

        loadMax.data = [];
        load1min.data = [];
        load5min.data = [];
        load15min.data = [];

        serverDatas.forEach(function(data) {
            details = JSON.parse(data.details)
            console.log("CPU : ");     
            console.log(details.cpu.load.min1);     
            console.log("Timestamp : ");     
            console.log(details.timestamp);     

            loadMax.data.push({
                x: details.timestamp * 1000,
                y: parseFloat(details.cpu.count)
            });

            load1min.data.push({
                x: details.timestamp * 1000,
                y: parseFloat(details.cpu.load.min1)
            });

            load5min.data.push({
                x: details.timestamp * 1000,
                y: parseFloat(details.cpu.load.min5)
            });

            load15min.data.push({
                x: details.timestamp * 1000,
                y: parseFloat(details.cpu.load.min15)
            });

        });

        $('#cpu-container').highcharts({
            chart: {
                type: 'spline',
                zoomType: 'x',
                animation: Highcharts.svg, // don't animate in old IE
                marginRight: 10,
                events: {
                    load: function () {
                        console.log(this.series)

                        var loadMax = this.series[0];
                        var load1min = this.series[1];
                        var load5min = this.series[2];
                        var load15min = this.series[3];


                        socket.on('serverUpdate', function (data) {
                        
                            var data = JSON.parse(data),x,y;

                            x = data.timestamp * 1000,

                            y = parseFloat(data.cpu.count);
                            loadMax.addPoint([x, y], true, true);
                            
                            y = parseFloat(data.cpu.load.min1);
                            load1min.addPoint([x, y], true, true);

                            y = parseFloat(data.cpu.load.min5);
                            load5min.addPoint([x, y], true, true);

                            y = parseFloat(data.cpu.load.min15);
                            load15min.addPoint([x, y], true, true);

                        })
                    }
                }
            },
            title: {
                text: 'Load'
            },
            xAxis: {
                type: 'datetime',
                tickPixelInterval: 150
            },
            yAxis: {
                title: {
                    text: 'Load'
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }]
            },
            tooltip: {
                formatter: function () {
                    return '<b>' + this.series.name + '</b><br/>' +
                        Highcharts.dateFormat('%d-%m-%Y %H:%M:%S', this.x) + '<br/>' +
                        Highcharts.numberFormat(this.y, 2);
                }
            },
            legend: {
                enabled: true
            },
            exporting: {
                enabled: false
            },
            series: [loadMax, load1min, load5min, load15min]
        });









        var memoryTotal = {
            name: 'Total',
            color: '#dd4b39',
            marker : {
                enabled : false
            }
        };

        var memoryUsed = {
            name: 'Used',
            color: '#00c0ef',
            type: 'areaspline',
            marker : {
                enabled : false
            }
        };

        var details;

        memoryTotal.data = [];
        memoryUsed.data = [];

        serverDatas.forEach(function(data) {
            details = JSON.parse(data.details)
            console.log("Memory : ");     
            console.log(details.memory.used);     
            console.log("Timestamp : ");     
            console.log(details.timestamp);     

            memoryTotal.data.push({
                x: details.timestamp * 1000,
                y: parseFloat(details.memory.total)
            });

            memoryUsed.data.push({
                x: details.timestamp * 1000,
                y: parseFloat(details.memory.used)
            });

        });

        $('#memory-container').highcharts({
            chart: {
                type: 'spline',
                zoomType: 'x',
                animation: Highcharts.svg, // don't animate in old IE
                marginRight: 10,
                events: {
                    load: function () {
                        console.log(this.series)

                        var memoryTotal = this.series[0];
                        var memoryUsed = this.series[1];


                        socket.on('serverUpdate', function (data) {
                        
                            var data = JSON.parse(data),x,y;

                            x = data.timestamp * 1000,

                            y = parseFloat(data.memory.total);
                            memoryTotal.addPoint([x, y], true, true);
                            
                            y = parseFloat(data.memory.used);
                            memoryUsed.addPoint([x, y], true, true);
                        })
                    }
                }
            },
            title: {
                text: 'RAM'
            },
            xAxis: {
                type: 'datetime',
                tickPixelInterval: 150
            },
            yAxis: {
                title: {
                    text: 'Memory'
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }]
            },
            tooltip: {
                formatter: function () {
                    return '<b>' + this.series.name + '</b><br/>' +
                        Highcharts.dateFormat('%d-%m-%Y %H:%M:%S', this.x) + '<br/>' +
                        Highcharts.numberFormat(this.y, 2);
                }
            },
            legend: {
                enabled: true
            },
            exporting: {
                enabled: false
            },
            series: [memoryTotal, memoryUsed]
        });











        var swapTotal = {
            name: 'Total',
            color: '#dd4b39',
            marker : {
                enabled : false
            }
        };

        var swapUsed = {
            name: 'Used',
            color: '#00c0ef',
            type: 'areaspline',
            marker : {
                enabled : false
            }
        };

        var details;

        swapTotal.data = [];
        swapUsed.data = [];

        serverDatas.forEach(function(data) {
            details = JSON.parse(data.details)
            console.log("Swap : ");     
            console.log(details.memory.swap.used);     
            console.log("Timestamp : ");     
            console.log(details.timestamp);     

            swapTotal.data.push({
                x: details.timestamp * 1000,
                y: parseFloat(details.memory.swap.total)
            });

            swapUsed.data.push({
                x: details.timestamp * 1000,
                y: parseFloat(details.memory.swap.used)
            });

        });

        $('#swap-container').highcharts({
            chart: {
                type: 'spline',
                zoomType: 'x',
                animation: Highcharts.svg, // don't animate in old IE
                marginRight: 10,
                events: {
                    load: function () {
                        console.log(this.series)

                        var swapTotal = this.series[0];
                        var swapUsed = this.series[1];


                        socket.on('serverUpdate', function (data) {
                        
                            var data = JSON.parse(data),x,y;

                            x = data.timestamp * 1000,

                            y = parseFloat(data.memory.swap.total);
                            swapTotal.addPoint([x, y], true, true);
                            
                            y = parseFloat(data.memory.swap.used);
                            swapUsed.addPoint([x, y], true, true);
                        })
                    }
                }
            },
            title: {
                text: 'Swap'
            },
            xAxis: {
                type: 'datetime',
                tickPixelInterval: 150
            },
            yAxis: {
                title: {
                    text: 'Swap'
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }]
            },
            tooltip: {
                formatter: function () {
                    return '<b>' + this.series.name + '</b><br/>' +
                        Highcharts.dateFormat('%d-%m-%Y %H:%M:%S', this.x) + '<br/>' +
                        Highcharts.numberFormat(this.y, 2);
                }
            },
            legend: {
                enabled: true
            },
            exporting: {
                enabled: false
            },
            series: [swapTotal, swapUsed]
        });
















        var diskTotal = {
            name: 'Total',
            color: '#dd4b39',
            marker : {
                enabled : false
            }
        };

        var diskUsed = {
            name: 'Used',
            color: '#00c0ef',
            type: 'areaspline',
            marker : {
                enabled : false
            }
        };

        //TODO disk warning at 80%

        var details;

        diskTotal.data = [];
        diskUsed.data = [];

        serverDatas.forEach(function(data) {
            details = JSON.parse(data.details)
            console.log("Disk : ");     
            console.log(details.disk.used);     
            console.log("Timestamp : ");     
            console.log(details.timestamp);     

            diskTotal.data.push({
                x: details.timestamp * 1000,
                y: parseFloat(details.disk.total)
            });

            diskUsed.data.push({
                x: details.timestamp * 1000,
                y: parseFloat(details.disk.used)
            });

        });

        $('#disk-container').highcharts({
            chart: {
                type: 'spline',
                zoomType: 'x',
                animation: Highcharts.svg, // don't animate in old IE
                marginRight: 10,
                events: {
                    load: function () {
                        console.log(this.series)

                        var diskTotal = this.series[0];
                        var diskUsed = this.series[1];


                        socket.on('serverUpdate', function (data) {
                        
                            var data = JSON.parse(data),x,y;

                            x = data.timestamp * 1000,

                            y = parseFloat(data.disk.total);
                            diskTotal.addPoint([x, y], true, true);
                            
                            y = parseFloat(data.disk.used);
                            diskUsed.addPoint([x, y], true, true);
                        })
                    }
                }
            },
            title: {
                text: 'Disk'
            },
            xAxis: {
                type: 'datetime',
                tickPixelInterval: 150
            },
            yAxis: {
                title: {
                    text: 'Disk'
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }]
            },
            tooltip: {
                formatter: function () {
                    return '<b>' + this.series.name + '</b><br/>' +
                        Highcharts.dateFormat('%d-%m-%Y %H:%M:%S', this.x) + '<br/>' +
                        Highcharts.numberFormat(this.y, 2);
                }
            },
            legend: {
                enabled: true
            },
            exporting: {
                enabled: false
            },
            series: [diskTotal, diskUsed]
        });
    });
});
            </script>

            {% endif %}

        {% endblock %}

    </body>
</html>
